syntax = "proto3";
package com.example.common.meta;
message ProtoMsg {
    // 网络通信涉及到消息的定义，不管是直接使用二进制格式，还是 xml、json等字符串格式。消息都可以大体的分为3大消息类型:
    //  请求消息、应答消息、命令消息

    // 一般情况下,每个消息还会包含一个序列号、和一个能够唯一区分消息类型的类型定义。

    // 原则一：使用 enum定义消息类型
    // 为每个系统都定义一个 HeadType 枚举。包含系统用到的所有消息的枚举类型
    enum HeadType {
        LOGIN_REQUEST = 0;
        LOGIN_RESPONSE = 1;
        LOGOUT_REQUEST = 2;
        LOGOUT_RESPONSE = 3;
        KEEPALIVE_REQUEST = 4;
        KEEPALIVE_RESPONSE = 5;
        MESSAGE_REQUEST = 6;
        MESSAGE_RESPONSE = 7;
        MESSAGE_NOTIFICATION = 8;
    }

    // 原则二: 一个 protobuf message 对应一类消息
    // 会为每个具有消息体的消息定义一个对应的protobuf message。
    message LoginRequest {
        string uid = 1;
        string deviceId = 2;
        string token = 3;
        uint32 platform = 4;  //客户端平台 windows、mac、android、ios、web
        string appVersion = 5;
    }

    message LoginResponse {
        bool result = 1;
        uint32 code = 2;
        string info = 3;
        uint32 expose = 4; //错误描述是否提示给用户:1 提示;0 不提示
    }

    message MessageRequest {
        uint64 msgId = 1;
        string from = 2;
        string to = 3;
        uint64 time = 4;
        uint32 msgType = 5;
        string content = 6;
        string url = 7;
        string property = 8;
        string fromNick = 9;
        string json = 10;
    }

    // 原则三：应答消息需要成功标记和应答序号
    // 对于应答消息，并非总是成功的，因此在应答消息中还会包含另外2个字段。
    //      一个用于描述应答是否成功，一个用于描述失败时的字符串信息。
    //      对于有多个应答的消息来说，可能会包含是否为最后一个应答消息的标识——应答的序号（类似与网络数据包被分包以后，协议要合并时，需要知道分片在包中的具体位置）。
    message MessageResponse {
        bool result = 1;
        uint32 code = 2;
        string info = 3;
        uint32 expose = 4; //错误描述是否提示给用戶:1 提示; 0 不提示
        bool lastBlock = 5;
        fixed32 blockIndex = 6;
    }

    message MessageNotification {
        uint32 msgType = 1;   // 5 = heartbeat,
        bytes sender = 2;
        string json = 3;
        string timestamp = 4;
    }

    // 外层消息
    // 原则四：编解码从顶层消息开始
    // 顶层消息是一种嵌套消息，嵌套了各种类型消息
    message Message {
        HeadType type = 1; //消息类型
        uint64 sequence = 2; //消息系列号
        string sessionId = 3;
        LoginRequest loginRequest = 4;
        LoginResponse loginResponse = 5;
        MessageRequest messageRequest = 6;
        MessageResponse messageResponse = 7;
        MessageNotification messageNotification = 8; // 通知消息
    }

    // sequence 消息系列号
    // 主要用于Request和Response，Response的值必须和Request相同，使得发送端可以进行事务匹配处理
}